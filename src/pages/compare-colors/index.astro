---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import colorTable from "../../modules/colorTable.js";
import {formatColors} from '../../modules/getColors'
import compare2ColorsText from '../../modules/compare2ColorsText'

// https://www.netlify.com/blog/swr-and-fine-grained-cache-control/#how-do-these-new-edge-caching-features-work
Astro.response.headers.set('Cache-Control', 'public, max-age=0, must-revalidate');
Astro.response.headers.set('Netlify-CDN-Cache-Control', 'public, max-age=0, stale-while-revalidate=31536000');
const filters = [
    {
        id: 'filter-aa',
        label: 'Accessible',
        name: 'filter-aa',
        value: Astro.url.searchParams?.get("filter-aa") || false,
    },
    {
        id: 'filter-aalarge',
        label: 'Only accessible for large text',
        name: 'filter-aalarge',
        value: Astro.url.searchParams?.get("filter-aalarge") || false,
    },
    {
        id: 'filter-fail',
        label: 'Not accessible',
        name: 'filter-fail',
        value: Astro.url.searchParams?.get("filter-fail") || false,
    },
]
let colors = [];
const hasColorsInURL = Astro.url.searchParams?.get("colors")?.split(",").length
if(hasColorsInURL) {
    colors = formatColors(Astro.url.searchParams?.get("colors")).split(',').map(color => color.trim())
}
const hasColorToAdd = !!Astro.url.searchParams?.get("color") || false;
if (hasColorToAdd) {
    const colorToAdd = Astro.url.searchParams?.get("color").trim();
    if (!colors.includes(colorToAdd)) {
        colors.push(colorToAdd);
        const filterParams = filters.map(filter => {
            return filter.value ? `&${filter.name}=${filter.value}` : false;
        }).filter(Boolean).join('');
        return Astro.redirect(
            `/compare-colors/?colors=${encodeURIComponent(colors.join(", "))}${filterParams}`,
        );
    }
}
let colorOutput = "";
if (colors && colors.length > 1) {
    colorOutput = colorTable(colors);
}
const url = Astro.url.origin
let image = '';
let title = 'Compare colors';
let description = '';
if (colors.length === 2) {
    image = `${url}/compare-colors/2colors.png?colors=${encodeURIComponent(colors[0])},${encodeURIComponent(colors[1])}`;
    let comparisonText = compare2ColorsText(colors[0],colors[1]);
    if(comparisonText) {
        title = comparisonText.text;
        description = comparisonText.description;
    }
}
---

<Layout 
    title={title} 
    image={image} url={url} 
    description={description} 
    classList={filters.map( filter => {
        return filter.value ? filter.name : false
}   ).filter(Boolean)}
>
    <Header>Compare colors</Header>
    <main>
        <form action="./">
            <label for="colors">
                <span>
                    Add a comma seperated list of colors to find out which pairs
                    of colors are accessible or not.
                </span>
            </label>
            <input-params class="colors__input-wrapper" data-value={colors.join(", ")}>
                <textarea cols="30" id="colors" name="colors" rows="3"
                    >{colors.join(", ")}</textarea>
                <div class="input-example">
                    For example: red,  #00F, #FFFFFF, hsl(44 100% 50%), rgb(0 0 0)
                </div>
            </input-params>
            <div class="controls">
                <label for="color" class="color-picker">
                    <input
                        value=""
                        name="color"
                        id="color"
                        type="color"
                        class="js-add-color"
                        data-for="colors"
                    />
                    <span> Add a color to the box above</span>
                </label>
                <a href="/compare-colors/#clear-colors" id="clear-colors">
                    <svg
                        class="icon-no"
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        stroke="currentColor"
                        stroke-width="4"
                    >
                        <path d="m6 6 12 12M6 18 18 6"></path>
                    </svg>
                    <span>Clear colors</span>
                </a>

            </div>
            <div class="filters js-filters">
                <b>Filters:</b>
                <div>
                    {filters.map(filter => {
                        return (<input-params>
                            <label for={filter.id}> 
                                <input 
                                    id={filter.id} 
                                    name={filter.name} 
                                    type="checkbox"
                                    checked={!!filter.value ? '' : null}
                                >
                                {filter.label}
                            </label>
                        </input-params>)
                    })}
                </div>
            </div>
            <button type="submit">submit</button>
        </form>
        <compare-colors data-prerendered="true">
            <Fragment set:html={colorOutput} />
        </compare-colors>
    </main>
</Layout>
<style>
    label {
        display: block;
        line-height: 2;
        margin-top: 1em;
        line-height: 1.5;
    }
    @supports (display: grid) {
        input-params.colors__input-wrapper {
            display: grid;
        }
        .colors__input-wrapper:after {
            content: attr(data-value) ' ';
            visibility: hidden;
            margin: 0;
        }
    }
    .colors__input-wrapper {
        margin: 1em 0 0;
    }
    .colors__input-wrapper:after,
    textarea {
        font-family: monospace;
        grid-area: 1/1;
        border: 0.25em solid #000;
        border-bottom: 0;
        border-radius: 1em;
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        box-sizing: border-box;
        color: #000;
        display: block;
        font-size: 1rem;
        min-height: 100%;
        padding: 2.5%;
        resize: vertical;
        width: 100%;
    }
    .input-example {
        margin: 0 0 0;
        background-color: rgba(118, 118, 118, 0.5);
        padding: 0.5em 2.5%;
        border: 0.25em solid currentColor;
        border-top: 0;
        border-bottom-left-radius: 1em;
        border-bottom-right-radius: 1em;
    }
    .input-example::selection {
        color: var(--bg);
        background-color:  var(--color);
    }
    @media (prefers-color-scheme: dark) {
        textarea {
            border-color: #fff;
        }
    }
    textarea {
        outline: none;
    }
    button {
        color: var(--bg);
        background: var(--color);
        border: 0.25em solid;
        appearance: none;
        padding: 1em 2.5%;
        border-radius: 1em;
        font-size: 1em;
        line-height: 1;
    }
    .filters {
        display: block;
        width: 100%;
        margin: 0;
    }
    .filters > div {
        display: inline-block;
    }
    .filters b {
        display: inline-block;
        margin: 1em .5em 0 0;
    }
    .filters label {
        display: inline-block;
        border: 0.25em solid currentColor;
        border-radius: 1em;
        padding: .5em .5em;
        margin: 0;
        text-wrap: nowrap;
        font-size: inherit;
    }
    .filters input-params {
        font-size: 1em;
        display: inline-block;
        margin: 1em 1em 0 0;
    }
    .controls {
        margin: .5em 0 0;
    }
    .controls span {
        display: inline;
    }
    .controls > * {
        margin: 1em 1em 0 0;
        vertical-align: top;
        display: inline-block;
        border: 0.25em solid currentColor;
        line-height: 1;
        font-size: 1em;
        padding: 0.5em 2.5%;
        border-radius: 1em;
    }
    @media (prefers-color-scheme: light) {
        .controls > * {
            color: var(--bg);
            border-color: var(--color);
            background: var(--color);
        }
    }
    .controls input {
        border-radius: 100em;
    }
    .controls label:focus-within,
    .controls a:focus {
        outline: 0.125em solid var(--color);
        outline-offset: 0.25em;
    }
    .controls svg,
    .controls input[type="color"] {
        background-color: transparent;
        box-sizing: border-box;
        appearance: none;
        border: 0;
        display: inline-block;
        font-size: 16px;
        font-size: 1rem;
        line-height: 1.5;
        vertical-align: bottom;
        padding: 0;
        height: 1.5rem;
        width: 1.375em;
    }
    .controls input[type="color"]::-webkit-color-swatch {
        display: inline-block;
        vertical-align: middle;
        border-radius: 100em;
        border: 1px solid rgba(118,118,118,.5);
        width: 100%;
        height: 100%;
    }
    .controls input[type="color"]::-moz-color-swatch {
        display: inline-block;
        border-radius: 100em;
        border: 1px solid #fff;
        width: 100%;
        height: 100%;
    }
    @media print {
        form {
            display: none !important;
        }
    }
</style>
<style is:global>
    .color-list__item {
        max-width: none;
    }
    .color-list__item > * {
        display: block;
    }
    .color-list-info {
        display: inline-flex;
        vertical-align: top;
        gap: .25em;
    }
    .color-list-info svg {
        flex-shrink: 0;
    }
    .color-list-info span {
        text-wrap: pretty;
    }
    @media (min-width: 40em) {
        .color-list__item > * {
            display: inline-block;
        }
    }
    html[class*="filter-"] .color-list__item{
        display: none;
    }
    html.filter-fail .color-list__item--fail{
        display: block;
    }
    html.filter-aa .color-list__item--aa{
        display: block;
    }
    html.filter-aalarge .color-list__item--aalarge{
        display: block;
    }
    .color-list__color {
        border-radius: 1em;
        border: .25em solid transparent;
        padding: 2.5%;
        background-color: var(--color,#000);
    }
    * + .color-list__color {
        margin-top: 1em;
    }
    .color-list__color--light {
        color: #fff;
    }
    .color-list__color--dark {
        color: #000;
    }
    compare-colors {
        display: block;
        margin-top: 1em;
    }
    compare-colors h2 {
        font-size: clamp(1.5em, calc(1em + 3vw), 4em );
        font-weight: 900;
        line-height: calc(1em + .5rem);
        margin: 0;
    }
    compare-colors h2 span {
        -webkit-text-stroke: .09375rem rgba(118, 118, 118, 0.5);
    }
    compare-colors h3 {
        font-size: clamp(1em, calc(1em + 3vw), 3em );
        font-weight: 900;
        line-height: calc(1em + .5rem);
        margin: 0;
    }
    h2 + * {
        margin-top: 1em;
    }
    input-params {
        display: block;
        border-radius: 1em;
        outline-offset: 0.25em;
    }
    input-params:focus-within {
        outline: 0.125em solid var(--color);
    }
    input-params:defined ~ button {
        display: none;
    }
    compare-colors p,
    compare-colors svg {
        vertical-align: middle;
    }
    compare-colors span {
        display: inline-block;
    }
    .icon-no {
        stroke-width: 4.5;
    }
    .icon-large {
        stroke-width: 1.25;
    }
    .icon-yes {
        stroke-width: 1.25;
    }
</style>
<script src="../../modules/compare-colors.js"></script>
<script src="../../modules/input-params.js"></script>
<script>
    import {formatColors} from '../../modules/getColors.js'

    const getColors = () => {
        const url = new URL(window.location.href);
        const colorString = url.searchParams.get("colors");
        const colors = url.searchParams.get("colors");
        return colors;
    };
    const setColors = () => {
        const colors = getColors();
        const compareColors = document.querySelector("compare-colors");
        if (compareColors) {
            compareColors.dataset.colors = colors || "";
        }
    };
    const getFilters = () => {
        const url = new URL(window.location.href);
        const filterInputs = document.querySelectorAll('.js-filters input');
        const filters = {};
        filterInputs.forEach(element => {
            const filterName = element.getAttribute('name')
            const filterValue = url.searchParams.get(filterName) || false;
            filters[filterName] = filterValue;
        })
        return filters
    }
    const setFilters = () => {
        const filters = getFilters();
        const doc = document.documentElement;
        for (const filter in filters) {
            const filtered = filters[filter];
            if(filtered) {
                doc.classList.add(filter);
            } else {
                doc.classList.remove(filter);
            }
        }
    }
    setColors();
    window.addEventListener("popstate", (event) => {
        setColors();
        setFilters();
    });
    const colorPicker = document.querySelector(".js-add-color");
    colorPicker.addEventListener("change", (event) => {
        const input = document.getElementById(colorPicker.dataset.for);
        input.value = input.value
            ? `${input.value}, ${colorPicker.value}`
            : colorPicker.value;
        // input.style.minHeight = input.scrollHeight;
        const inputEvent = new Event("input");
        input.dispatchEvent(inputEvent);
        const changeEvent = new Event("change");
        input.dispatchEvent(changeEvent);
        const blurEvent = new Event("blur");
        input.dispatchEvent(blurEvent);
        const focusOutEvent = new Event("focusout");
        input.dispatchEvent(focusOutEvent);
    });
    const colorTextInput = document.getElementById('colors');
    colorTextInput.addEventListener('blur',(event) => {
        const colors = formatColors(colorTextInput.value)
        if(colors !== colorTextInput.value) {
            colorTextInput.value = colors;
            const changeEvent = new Event("input");
            colorTextInput.dispatchEvent(changeEvent);
        }
    })
    /**
     * @link https://css-tricks.com/auto-growing-inputs-textareas/
     */
    colorTextInput.addEventListener('input',(event) => {
        colorTextInput.parentElement.dataset.value = colorTextInput.value;
    })
</script>
